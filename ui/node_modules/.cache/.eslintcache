[{"C:\\college\\reactAp\\ui\\src\\index.js":"1","C:\\college\\reactAp\\ui\\src\\App.js":"2","C:\\college\\reactAp\\ui\\src\\reportWebVitals.js":"3","C:\\college\\reactAp\\ui\\src\\pages\\Address.js":"4","C:\\college\\reactAp\\ui\\src\\pages\\Receipt.js":"5","C:\\college\\reactAp\\ui\\src\\pages\\Wallet.js":"6","C:\\college\\reactAp\\ui\\src\\pages\\Transaction.js":"7","C:\\college\\reactAp\\ui\\src\\components\\Navbar\\index.js":"8","C:\\college\\reactAp\\ui\\src\\components\\Navbar\\Navbarelement.js":"9","C:\\college\\reactAp\\ui\\src\\pages\\CurrentRecipt.js":"10"},{"size":540,"mtime":1679468132000,"results":"11","hashOfConfig":"12"},{"size":2012,"mtime":1679468132000,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1679468132000,"results":"14","hashOfConfig":"12"},{"size":1362,"mtime":1679903592358,"results":"15","hashOfConfig":"12"},{"size":1282,"mtime":1680053867679,"results":"16","hashOfConfig":"12"},{"size":1500,"mtime":1679468133000,"results":"17","hashOfConfig":"12"},{"size":8058,"mtime":1680052770358,"results":"18","hashOfConfig":"12"},{"size":848,"mtime":1679468133000,"results":"19","hashOfConfig":"12"},{"size":1746,"mtime":1679468133000,"results":"20","hashOfConfig":"12"},{"size":852,"mtime":1680052702401,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ym88f7",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\college\\reactAp\\ui\\src\\index.js",[],[],"C:\\college\\reactAp\\ui\\src\\App.js",["55","56"],[],"C:\\college\\reactAp\\ui\\src\\reportWebVitals.js",[],[],"C:\\college\\reactAp\\ui\\src\\pages\\Address.js",["57","58"],[],"C:\\college\\reactAp\\ui\\src\\pages\\Receipt.js",["59"],[],"import React, { useState, useEffect } from 'react';\r\nimport Transaction from './Transaction';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Receipt = () => {\r\n\r\n  const [tnx, setTnx] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:4000/transcation_details')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setTnx(data)\r\n        // Transaction(data)\r\n\r\n        console.log(data)\r\n      })\r\n      .catch(error => console.error(error));\r\n  }, []);\r\n\r\n  // const { sourceAccount, destinationAccount, amount, transactionhash, blockhash } = props;\r\n  // console.log(props.receipts);\r\n  // className='receipt'\r\n  return (\r\n\r\n    <div>\r\n\r\n      {tnx.map((tnxId, index) => (\r\n        <div className='receipt' key={index}>\r\n          {/* {tnxId.destination_account} */}\r\n          <p>Source Account: {tnxId.source_account}</p>\r\n          <p>Destination Account: {tnxId.destination_account}</p>\r\n          <p>Amount: {tnxId.amount}</p>\r\n          <p>Transaction Hash: {tnxId.tnx_hash}</p>\r\n          <p>Block Hash: {tnxId.block_hash}</p>\r\n          <p>Block Number: {tnxId.block_num}</p>\r\n          <p>Gas Used: {tnxId.gas_used}</p>\r\n          {/* {console.log(tnxId.timestamp)} */}\r\n\r\n        </div>\r\n      ))}\r\n\r\n\r\n    </div>\r\n\r\n\r\n\r\n  );\r\n\r\n};\r\n\r\nexport default Receipt;","C:\\college\\reactAp\\ui\\src\\pages\\Wallet.js",[],[],"C:\\college\\reactAp\\ui\\src\\pages\\Transaction.js",["60","61"],[],"import React, { useEffect, useState, Component } from 'react';\r\nimport CurrentRecipt from './CurrentRecipt';\r\n// import data from '../model/data.json';\r\nimport Select from 'react-select'\r\n\r\n\r\n\r\n\r\nconst Transaction = () => {\r\n  const [amount, setAmount] = useState('');\r\n  const [showReceipt, setShowReceipt] = useState(false);\r\n  var [ownerBalance, setOwnerBalance] = useState(0)\r\n\r\n  const [selectedOption, setSelectedOption] = useState(null); // initialize state to null\r\n  const [destinationAccount, setDestinationAccount] = useState('initial-value');\r\n  const inputAmount = document.getElementById('amount_check');\r\n  const [receipts, setReceipts] = useState([]);\r\n  var sourceAccount = 'Account A';\r\n  const transactionhash = \"fdc3c31435f7f2f557bfd82\";\r\n  const blockhash = \"Rgsj1AKVnpJYhHz4rN\";\r\n\r\n\r\n  const [walletData, setWalletData] = useState([]);\r\n  // const [ownerWallet, setOwnerWallet] = useState({});\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:4000/json')\r\n      .then(response => response.json())\r\n      .then(data => setWalletData(data))\r\n      .catch(error => console.error(error));\r\n  }, []);\r\n\r\n  const [ownerAddress, setOwnerAddress] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:4000/get_owner')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setOwnerAddress(data)\r\n        setOwnerBalance(data[0].amount)\r\n        console.log(data)\r\n      })\r\n      .catch(error => console.error(error));\r\n  }, []);\r\n\r\n\r\n\r\n\r\n\r\n  const options = walletData.map(wallet => ({\r\n    value: wallet.walletaddress,\r\n    label: wallet.walletaddress\r\n  }));\r\n\r\n  // function to handle adding a new receipt\r\n  const addReceipt = (sourceAccount, destinationAccount, amount) => {\r\n    const newReceipt = {\r\n      sourceAccount: sourceAccount,\r\n      destinationAccount: destinationAccount,\r\n      amount: amount\r\n    };\r\n    setReceipts([...receipts, newReceipt]);\r\n  }\r\n\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault(); // prevent default form submission behavior\r\n    if (selectedOption === null || inputAmount.value === null || inputAmount.value === 0 || inputAmount.value === \"\" || inputAmount.value === \"0\") {\r\n      if (selectedOption != null) {\r\n        alert('Please enter how much ETH you want to send.')\r\n      } else {\r\n        alert('Please select wallet address to send ETH.')\r\n      }\r\n\r\n    } else {\r\n      if (ownerBalance < inputAmount.value) {\r\n        alert('balnce is low please add token')\r\n      } else {\r\n        askUser()\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  function askUser() {\r\n    const confirmation = window.prompt('Are you sure you want to continue? (y/n)');\r\n    if (confirmation === 'y') {\r\n      // Perform action\r\n\r\n      console.log(selectedOption.value);\r\n      console.log(inputAmount.value);\r\n      console.log(sourceAccount);\r\n      // console.log(OwnerCurrentBalance); need to get value owner balance\r\n      fetch('http://localhost:4000/make_transcation', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          destination_account: selectedOption.value,\r\n          source_account: sourceAccount,\r\n          tnx_hash: 'csdcsd',\r\n          block_hash: 'csdcsdcsd',\r\n          block_num: 23,\r\n          gas_used: 5334,\r\n          amount: inputAmount.value\r\n        })\r\n      })\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n          }\r\n          setOwnerBalance(ownerBalance - inputAmount.value);\r\n          setDestinationAccount(selectedOption.value)\r\n          addReceipt(sourceAccount, selectedOption.value, inputAmount.value);\r\n          console.log(receipts)\r\n          setShowReceipt(true);\r\n          return response.json();\r\n\r\n        })\r\n        .then(data => {\r\n          console.log('Success:', data);\r\n        })\r\n        .catch(error => {\r\n          console.error('Error:', error);\r\n        });\r\n\r\n    } else {\r\n      // Do nothing or handle cancellation\r\n    }\r\n  }\r\n\r\n\r\n  // handle select option change\r\n  const handleSelectChange = (selectedOption) => {\r\n    setSelectedOption(selectedOption); // update state when an option is selected\r\n\r\n  }\r\n\r\n\r\n\r\n  return (\r\n\r\n    <div className='transaction'>\r\n      <h1>Transfer</h1>\r\n      <form onSubmit={handleSubmit}  >\r\n        <fieldset>\r\n          <div className=\"App\">\r\n\r\n          </div>\r\n\r\n          <label>\r\n\r\n            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n              <div >\r\n                <p><b> Wallet Owner :    </b></p>\r\n              </div>\r\n              <div style={{ paddingLeft: '20px' }}>\r\n                <p><b>\r\n\r\n                  {ownerAddress.map(wallet => (\r\n                    <div key={wallet.owner_account}>\r\n                      {sourceAccount = wallet.owner_account}\r\n                    </div>\r\n                  ))}\r\n\r\n                </b></p>\r\n              </div>\r\n\r\n            </div>\r\n\r\n            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n              <div  >\r\n                <p><b>  Owner Balance : </b></p>\r\n              </div>\r\n\r\n              <div id='ownerBalance' style={{ paddingLeft: '20px' }} >\r\n                <p><b>\r\n                  {/* {ownerAddress.map(wallet => (\r\n                    <div key={wallet.owner_account}>\r\n                      {ownerBalance = wallet.amount}\r\n                    </div>\r\n                  ))} */}\r\n                  {ownerBalance}\r\n\r\n                </b></p>\r\n\r\n              </div>\r\n\r\n              {/* \r\n              <div style={{ paddingLeft: '20px' }}>\r\n                {walletData ? (\r\n                  <Select\r\n                    options={walletData.wallets.map(wallet => ({\r\n                      value: wallet.walletaddress,\r\n                      label: wallet.walletaddress\r\n                    }))}\r\n                    onChange={handleSelectChange}\r\n                    value={selectedOption}\r\n                    placeholder=\"Select wallet address to sent ETH\"\r\n                  />\r\n                ) : (\r\n                  <p>No data yet</p>\r\n                )}\r\n              </div> */}\r\n\r\n\r\n              {/* \r\n              <div>\r\n\r\n                <ul>\r\n                  {walletData.map(wallet => (\r\n                    <li key={wallet.walletaddress}>\r\n                      <span>Wallet Address: {wallet.walletaddress}</span>\r\n                      <span>Wallet Balance: {wallet.walletbalance}</span>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n\r\n              </div> */}\r\n\r\n            </div>\r\n\r\n\r\n            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n              <div >\r\n                <p><b> Reciver Address    </b></p>\r\n              </div>\r\n              <div style={{ paddingLeft: '20px' }}>\r\n                <Select options={options}\r\n                  onChange={handleSelectChange}\r\n                  value={selectedOption}\r\n                  placeholder=\"Select wallet address to sent ETH\"\r\n                />\r\n              </div>\r\n\r\n            </div>\r\n          </label>\r\n          <label>\r\n\r\n\r\n\r\n            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n              <div >\r\n                <p><b> Amount in Ether </b></p>\r\n              </div>\r\n              <div style={{ paddingLeft: '20px' }}>\r\n                <input id='amount_check' name=\"Amount\" type=\"number\" style={{ height: '35px' }} />\r\n              </div>\r\n            </div>\r\n\r\n          </label>\r\n\r\n        </fieldset>\r\n\r\n        <button type=\"submit\" className=\"button\">Submit</button>\r\n\r\n\r\n      </form>\r\n\r\n      <div>\r\n        {showReceipt && <CurrentRecipt receipts={receipts} sourceAccount={sourceAccount} destinationAccount={destinationAccount} amount={amount} transactionhash={transactionhash} blockhash={blockhash} />}\r\n      </div>\r\n\r\n    </div >\r\n\r\n  );\r\n};\r\n\r\nexport default Transaction;\r\n\r\n\r\n\r\n",[],"C:\\college\\reactAp\\ui\\src\\components\\Navbar\\index.js",["62","63"],[],"C:\\college\\reactAp\\ui\\src\\components\\Navbar\\Navbarelement.js",[],[],"C:\\college\\reactAp\\ui\\src\\pages\\CurrentRecipt.js",[],[],{"ruleId":"64","severity":1,"message":"65","line":22,"column":9,"nodeType":"66","messageId":"67","endLine":22,"endColumn":21},{"ruleId":"64","severity":1,"message":"68","line":27,"column":9,"nodeType":"66","messageId":"67","endLine":27,"endColumn":21},{"ruleId":"69","severity":1,"message":"70","line":44,"column":11,"nodeType":"71","endLine":44,"endColumn":149},{"ruleId":"72","severity":1,"message":"73","line":44,"column":161,"nodeType":"71","endLine":44,"endColumn":213},{"ruleId":"64","severity":1,"message":"74","line":2,"column":8,"nodeType":"66","messageId":"67","endLine":2,"endColumn":19},{"ruleId":"64","severity":1,"message":"75","line":1,"column":38,"nodeType":"66","messageId":"67","endLine":1,"endColumn":47},{"ruleId":"64","severity":1,"message":"76","line":10,"column":18,"nodeType":"66","messageId":"67","endLine":10,"endColumn":27},{"ruleId":"64","severity":1,"message":"77","line":7,"column":3,"nodeType":"66","messageId":"67","endLine":7,"endColumn":9},{"ruleId":"64","severity":1,"message":"78","line":8,"column":3,"nodeType":"66","messageId":"67","endLine":8,"endColumn":13},"no-unused-vars","'handleSubmit' is assigned a value but never used.","Identifier","unusedVar","'handleChange' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","'Transaction' is defined but never used.","'Component' is defined but never used.","'setAmount' is assigned a value but never used.","'NavBtn' is defined but never used.","'NavBtnLink' is defined but never used."]